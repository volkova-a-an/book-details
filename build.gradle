buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.6.3")
    }
}

apply plugin: 'java'
apply plugin: 'io.spring.dependency-management'

group = 'com.graphql-java.tutorial'
version = '0.0.1-SNAPSHOT'

ext {
    karateVersion = '1.0.1'
    springBootVersion = '2.6.3'
    restAssuredVersion = '4.1.1'
}

repositories {
    mavenCentral()
}

dependencies {
    //graphql-spring-boot-starter is used for enabling GraphQL servlet, and it becomes available at a path /graphql. It initializes the GraphQLSchema bean.
    //allows us to write schema with GraphQL schema language, which is simple to understand.

    //We are adding three dependencies to our project inside the dependencies section of build.gradle:

    //the first two are GraphQL Java and GraphQL Java Spring and then we also add Google Guava.

    implementation 'com.graphql-java:graphql-java:17.3'
    implementation 'com.graphql-java:graphql-java-spring-boot-starter-webmvc:2021-10-25T04-50-54-fbc162f'
    // Guava is not strictly needed but it will make our life a little bit easier.
    implementation 'com.google.guava:guava:31.0.1-jre'
    implementation "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
    //provides a user interface with which we could test our GraphQL queries and view query definitions.
    implementation 'com.graphql-java-kickstart:graphiql-spring-boot-starter:11.1.0'
    testImplementation "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
    testImplementation "io.rest-assured:rest-assured:$restAssuredVersion"
    // https://mvnrepository.com/artifact/io.rest-assured/json-path
    implementation "io.rest-assured:json-path:$restAssuredVersion"
    // https://mvnrepository.com/artifact/io.rest-assured/xml-path
    implementation "io.rest-assured:xml-path:$restAssuredVersion"
    // https://mvnrepository.com/artifact/org.projectlombok/lombok
    compileOnly 'org.projectlombok:lombok:1.18.22'
    testCompile "com.intuit.karate:karate-junit5:${karateVersion}"

}

test {
    useJUnitPlatform()
    // pull karate options into the runtime
    systemProperty "karate.options", System.properties.getProperty("karate.options")
    // pull karate env into the runtime
    systemProperty "karate.env", System.properties.getProperty("karate.env")
    systemProperty "karate.output.dir", System.properties.setProperty("karate.output.dir","build")
    // ensure tests are always run
    outputs.upToDateWhen { false }
}

task karateDebug(type: JavaExec) {
    classpath = sourceSets.test.runtimeClasspath
    main = 'com.intuit.karate.cli.Main'
}

 sourceSets {
    test {
        resources {
            srcDir ('src/test/java')
            exclude '**/*.java'
        }
    }
}

sourceCompatibility  = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
